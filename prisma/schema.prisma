// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    fname          String
    lname          String
    phone         String   @unique
    email         String  @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    roleId   String
    role     Role   @relation(fields: [roleId], references: [id])
}



model Role {
  id           String           @id @default(cuid())
  name         String           
  deptId       String         
  dept         Dept             @relation("DeptRoles", fields: [deptId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users        User[]           
  permissions  RolePermission[] 
  @@unique([name, deptId])
}

model Permission {
  id           String           @id @default(cuid())
  name         String           @unique
  roles        RolePermission[] 
}


model RolePermission {
  id           String       @id @default(cuid())
  roleId       String
  permissionId String
  
  role         Role         @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission   Permission   @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([roleId, permissionId]) 
}
model Dept {
  id        String       @id @default(cuid())
  name        String   @unique   //shortNames (eg: HR, ADM,AGT,CUS, etc)       
  fullName    String             
  memberCount Int      @default(0)
  roles       Role[]   @relation("DeptRoles")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
