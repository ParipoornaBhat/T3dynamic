// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}



// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
//necessary auth, role, permission and department tables:-

model Dept {
  name        String   @id           // "ADM", "CUS", etc.
  fullName    String?               // Optional full name (e.g., "Administration")
  memberCount Int      @default(0)
  roles       Role[]   @relation("DeptRoles")
}

model Role {
  id             String            @id @default(cuid())
  name           String            @unique
  deptName       String
  dept           Dept              @relation("DeptRoles", fields: [deptName], references: [name])
  users          User[]            @relation("UserRole")
  permissions    RolePermission[]  // Reverse relation
}

model Permission {
  id               String            @id @default(cuid())
  name             String            @unique
  rolePermissions  RolePermission[]
}

model RolePermission {
  roleName         String
  permissionName   String
  role             Role       @relation(fields: [roleName], references: [name])
  permission       Permission @relation(fields: [permissionName], references: [name])

  @@id([roleName, permissionName])
}

model User {
  id          String  @id @default(cuid())
  email       String  @unique
  name        String
  password    String
  roleName    String
  role        Role    @relation("UserRole", fields: [roleName], references: [name])
  accounts    Account[]
  sessions    Session[]
}



